# syntax=docker/dockerfile:1.0-windows
FROM mcr.microsoft.com/windows/servercore:ltsc2022

# Use PowerShell as shell
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

# Download MSYS2 installer
RUN Invoke-WebRequest -Uri 'https://github.com/msys2/msys2-installer/releases/download/2024-01-13/msys2-x86_64-20240113.exe' -OutFile 'msys2-installer.exe'

# Install MSYS2 silently
RUN Start-Process -FilePath '.\\msys2-installer.exe' -ArgumentList '/S', '/DIR=C:\\msys64' -Wait -NoNewWindow -PassThru | ForEach-Object { `
    if ($_.ExitCode -ne 0) { throw 'MSYS2 installation failed with exit code: ' + $_.ExitCode } `
}

# Wait for bash.exe with retry
RUN Write-Host 'Waiting for C:\msys64\usr\bin\bash.exe...'; `
    $bashPath = 'C:\\msys64\\usr\\bin\\bash.exe'; `
    $maxWait = 15; `
    for ($i = 0; $i -lt $maxWait; $i++) { `
        if (Test-Path $bashPath) { Write-Host 'Found bash.exe'; break } `
        Start-Sleep -Seconds 2; `
        Write-Host "Waiting... ($i)" `
    }; `
    if (!(Test-Path $bashPath)) { throw "MSYS2 installation failed: bash.exe not found after $maxWait attempts." }

# Clean up installer
RUN Remove-Item 'msys2-installer.exe'

# Update PATH
ENV PATH="C:\\msys64\\usr\\bin;C:\\msys64\\mingw64\\bin;%PATH%"

# Update MSYS2 packages
RUN & 'C:\\msys64\\usr\\bin\\bash.exe' -c 'pacman -Syu --noconfirm'

# Bash sanity check
RUN $bashPath = 'C:\\msys64\\usr\\bin\\bash.exe'; `
    if (Test-Path $bashPath) { `
        Write-Host 'bash.exe exists'; `
        $version = & $bashPath --version; `
        Write-Host $version; `
        if ($LASTEXITCODE -ne 0) { throw 'bash --version failed with exit code: ' + $LASTEXITCODE } `
    } else { `
        throw 'bash.exe still not found at sanity check!' `
    }

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s CMD ["C:\\msys64\\usr\\bin\\bash.exe", "--version"]

# Default command
CMD ["C:\\msys64\\usr\\bin\\bash.exe", "-l"]

# Usage: docker run -it <image-name>